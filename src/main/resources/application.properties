spring.application.name=backendTPLab
#Configuraci?n de la base de datos H2
spring.datasource.url=jdbc:h2:mem:./betodb;
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

#Habilitar la consola de H2
spring.h2.console.enabled=true
#Par?metros para conectarnos a una base d edatos

#mysql de producci\u00f3n con CleverCloud

#spring.datasource.url=jdbc:mysql://ufj6xjdirzxhaiu5:WefUMbve6HetWKEdjcfm@b4qhl5tvrdwsyyjodn61-mysql.services.clever-cloud.com:3306/b4qhl5tvrdwsyyjodn61
#spring.datasource.username=ufj6xjdirzxhaiu5
#spring.datasource.password=WefUMbve6HetWKEdjcfm
#spring.datasource.hikari.maximum-pool-size=2

spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Configuraci?n de la base de datos MySQL
# spring.datasource.url=jdbc:mysql://localhost:3306/test
# spring.datasource.username=root
# spring.datasource.password=

# Configuracion de JPA
# mysql
# spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
# h2 database
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# EL update le dice que si no existe en las tablas que las cree y luego actualice
spring.jpa.hibernate.ddl-auto=update
# Muestra por la consola como se desarrollan las consultas SQL
spring.jpa.show-sql=true

# puerto de ejecuci?n, donde escucha el server embebido
server.port=8080


# OPEN API
# http://localhost:8080/swagger-ui/index.html  ASI HAY QUE LLAMARLO
springdoc.swagger-ui.enabled=true
springdoc.api-docs.enabled=true
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs

# LEVANTAR H2
# http://localhost:8080/h2-console/

